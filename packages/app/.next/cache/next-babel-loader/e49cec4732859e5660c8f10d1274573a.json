{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { PhoneOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { Checkbox, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useTAInQueueInfo } from \"../../../../hooks/useTAInQueueInfo\";\nimport { BannerPrimaryButton } from \"../../Banner\";\nimport { Header } from \"../TAQueueDetail\";\nimport TAQueueListItem from \"../TAQueueListItem\";\nexport var Description = styled.div.withConfig({\n  displayName: \"AllQuestionsChecklist__Description\",\n  componentId: \"sc-1m6wlb4-0\"\n})([\"font-size:12px;color:#8895a6;\"]);\nvar SelectAllContainer = styled.div.withConfig({\n  displayName: \"AllQuestionsChecklist__SelectAllContainer\",\n  componentId: \"sc-1m6wlb4-1\"\n})([\"padding:3px 8px;border-bottom:1px solid #cfd6de;\"]);\nvar QuestionsList = styled.div.withConfig({\n  displayName: \"AllQuestionsChecklist__QuestionsList\",\n  componentId: \"sc-1m6wlb4-2\"\n})([\"display:flex;flex-direction:column;\"]);\nvar RedText = styled.span.withConfig({\n  displayName: \"AllQuestionsChecklist__RedText\",\n  componentId: \"sc-1m6wlb4-3\"\n})([\"color:red;\"]);\nexport default function AllQuestionsCheckList(_ref) {\n  var groupCreator = _ref.groupCreator,\n      allQuestions = _ref.allQuestions,\n      hasMissingQuestions = _ref.hasMissingQuestions,\n      queueId = _ref.queueId,\n      onStartCall = _ref.onStartCall;\n\n  var _useState = useState(new Set()),\n      checkedQuestions = _useState[0],\n      setCheckedQuestions = _useState[1];\n\n  var _useTAInQueueInfo = useTAInQueueInfo(queueId),\n      isCheckedIn = _useTAInQueueInfo.isCheckedIn,\n      isHelping = _useTAInQueueInfo.isHelping;\n\n  var _ref2 = function () {\n    if (!isCheckedIn) {\n      return [false, \"You must check in to help students!\"];\n    } else if (isHelping) {\n      return [false, \"You are already helping a student\"];\n    } else {\n      return [true, \"Create Group & Call\"];\n    }\n  }(),\n      _ref3 = _slicedToArray(_ref2, 2),\n      canHelp = _ref3[0],\n      helpTooltip = _ref3[1];\n\n  var onQuestionChecked = function onQuestionChecked(q) {\n    if (!checkedQuestions.has(q.id)) {\n      setCheckedQuestions(new Set(checkedQuestions.add(q.id)));\n    } else {\n      checkedQuestions[\"delete\"](q.id);\n      setCheckedQuestions(new Set(checkedQuestions));\n    }\n  };\n\n  var onToggleSelectAll = function onToggleSelectAll(e) {\n    if (e.target.checked) {\n      setCheckedQuestions(new Set(allQuestions.map(function (q) {\n        return q.id;\n      })));\n    } else {\n      setCheckedQuestions(new Set());\n    }\n  };\n\n  var usersInLink = allQuestions.filter(function (question) {\n    return checkedQuestions.has(question.id);\n  }).map(function (question) {\n    return question.creator.email;\n  }).join(\",\");\n  return __jsx(\"div\", null, __jsx(Header, null, __jsx(\"div\", null, __jsx(\"strong\", null, \"\".concat(groupCreator.name, \"'s Group Session\")), __jsx(Description, null, \"Select Students to Create Group\", hasMissingQuestions ? __jsx(\"div\", null, __jsx(RedText, null, \"Note:\"), \" some students may not show up, as they did not consent to being grouped\") : null)), __jsx(\"div\", null, __jsx(Tooltip, {\n    title: helpTooltip\n  }, __jsx(\"span\", null, __jsx(BannerPrimaryButton, {\n    icon: __jsx(PhoneOutlined, null),\n    onClick: function onClick() {\n      API.questions.group({\n        questionIds: Array.from(checkedQuestions),\n        queueId: queueId\n      });\n      onStartCall();\n      window.open(\"https://teams.microsoft.com/l/chat/0/0?users=\".concat(usersInLink));\n    },\n    disabled: !canHelp || checkedQuestions.size === 0,\n    \"data-cy\": \"help-student\"\n  }))))), __jsx(SelectAllContainer, null, __jsx(Checkbox, {\n    checked: allQuestions.length === checkedQuestions.size,\n    indeterminate: checkedQuestions.size && checkedQuestions.size !== allQuestions.length,\n    onChange: onToggleSelectAll\n  }, __jsx(\"span\", {\n    style: {\n      paddingLeft: \"9px\"\n    }\n  }, \"Select All\"))), __jsx(QuestionsList, null, allQuestions.map(function (q, i) {\n    return __jsx(\"div\", {\n      key: q.id\n    }, __jsx(TAQueueListItem, {\n      question: q,\n      index: i + 1,\n      selected: checkedQuestions.has(q.id),\n      onClick: function onClick() {\n        return onQuestionChecked(q);\n      },\n      showCheckbox: true\n    }));\n  })));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TA/QuestionGrouping/AllQuestionsChecklist.tsx"],"names":["PhoneOutlined","API","Checkbox","Tooltip","React","useState","styled","useTAInQueueInfo","BannerPrimaryButton","Header","TAQueueListItem","Description","div","SelectAllContainer","QuestionsList","RedText","span","AllQuestionsCheckList","groupCreator","allQuestions","hasMissingQuestions","queueId","onStartCall","Set","checkedQuestions","setCheckedQuestions","isCheckedIn","isHelping","canHelp","helpTooltip","onQuestionChecked","q","has","id","add","onToggleSelectAll","e","target","checked","map","usersInLink","filter","question","creator","email","join","name","questions","group","questionIds","Array","from","window","open","size","length","paddingLeft","i"],"mappings":"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","sourcesContent":["import { PhoneOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { Question, User } from \"@koh/common\";\nimport { Checkbox, Tooltip } from \"antd\";\nimport React, { ReactElement, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useTAInQueueInfo } from \"../../../../hooks/useTAInQueueInfo\";\nimport { BannerPrimaryButton } from \"../../Banner\";\nimport { Header } from \"../TAQueueDetail\";\nimport TAQueueListItem from \"../TAQueueListItem\";\n\nexport const Description = styled.div`\n  font-size: 12px;\n  color: #8895a6;\n`;\nconst SelectAllContainer = styled.div`\n  padding: 3px 8px;\n  border-bottom: 1px solid #cfd6de;\n`;\nconst QuestionsList = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RedText = styled.span`\n  color: red;\n`;\n\nexport default function AllQuestionsCheckList({\n  groupCreator,\n  allQuestions,\n  hasMissingQuestions,\n  queueId,\n  onStartCall,\n}: {\n  groupCreator: User;\n  allQuestions: Question[];\n  hasMissingQuestions: boolean;\n  queueId: number;\n  onStartCall: () => void;\n}): ReactElement {\n  const [checkedQuestions, setCheckedQuestions] = useState<Set<number>>(\n    new Set()\n  );\n  const { isCheckedIn, isHelping } = useTAInQueueInfo(queueId);\n  const [canHelp, helpTooltip] = ((): [boolean, string] => {\n    if (!isCheckedIn) {\n      return [false, \"You must check in to help students!\"];\n    } else if (isHelping) {\n      return [false, \"You are already helping a student\"];\n    } else {\n      return [true, \"Create Group & Call\"];\n    }\n  })();\n\n  const onQuestionChecked = (q) => {\n    if (!checkedQuestions.has(q.id)) {\n      setCheckedQuestions(new Set(checkedQuestions.add(q.id)));\n    } else {\n      checkedQuestions.delete(q.id);\n      setCheckedQuestions(new Set(checkedQuestions));\n    }\n  };\n  const onToggleSelectAll = (e) => {\n    if (e.target.checked) {\n      setCheckedQuestions(new Set(allQuestions.map((q) => q.id)));\n    } else {\n      setCheckedQuestions(new Set());\n    }\n  };\n\n  const usersInLink = allQuestions\n    .filter((question) => checkedQuestions.has(question.id))\n    .map((question) => question.creator.email)\n    .join(\",\");\n\n  return (\n    <div>\n      <Header>\n        <div>\n          <strong>{`${groupCreator.name}'s Group Session`}</strong>\n          <Description>\n            Select Students to Create Group\n            {hasMissingQuestions ? (\n              <div>\n                <RedText>Note:</RedText> some students may not show up, as they\n                did not consent to being grouped\n              </div>\n            ) : null}\n          </Description>\n        </div>\n        <div>\n          <Tooltip title={helpTooltip}>\n            <span>\n              <BannerPrimaryButton\n                icon={<PhoneOutlined />}\n                onClick={() => {\n                  API.questions.group({\n                    questionIds: Array.from(checkedQuestions),\n                    queueId: queueId,\n                  });\n                  onStartCall();\n                  window.open(\n                    `https://teams.microsoft.com/l/chat/0/0?users=${usersInLink}`\n                  );\n                }}\n                disabled={!canHelp || checkedQuestions.size === 0}\n                data-cy=\"help-student\"\n              />\n            </span>\n          </Tooltip>\n        </div>\n      </Header>\n      <SelectAllContainer>\n        <Checkbox\n          checked={allQuestions.length === checkedQuestions.size}\n          indeterminate={\n            checkedQuestions.size &&\n            checkedQuestions.size !== allQuestions.length\n          }\n          onChange={onToggleSelectAll}\n        >\n          <span style={{ paddingLeft: \"9px\" }}>Select All</span>\n        </Checkbox>\n      </SelectAllContainer>\n      <QuestionsList>\n        {allQuestions.map((q, i) => (\n          <div key={q.id}>\n            <TAQueueListItem\n              question={q}\n              index={i + 1}\n              selected={checkedQuestions.has(q.id)}\n              onClick={() => onQuestionChecked(q)}\n              showCheckbox\n            />\n          </div>\n        ))}\n      </QuestionsList>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}